package com.pinit.kotlinproject.ActivityClass
import android.os.Bundle
import android.view.View
import android.widget.ProgressBar
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.pinit.kotlinproject.Adpter.RecyclerAdapter
import com.pinit.kotlinproject.ApiModel.NewsModel
import com.pinit.kotlinproject.R
import com.pinit.kotlinproject.Retrofit.Myapi
import com.pinit.kotlinproject.Retrofit.RetroClient
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.util.*

class ApIScreen : AppCompatActivity() {

    var api: Myapi? = null
    var newsList = ArrayList<Article>()
    var recyclerView: RecyclerView? = null
    var recyclerAdapter: RecyclerAdapter? = null
    var progressBar: ProgressBar? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_ap_iscreen)
        recyclerView = findViewById<View>(R.id.rcy_view) as RecyclerView
        progressBar = findViewById<View>(R.id.progress_circular_1) as ProgressBar
        progressBar!!.visibility = View.VISIBLE
        recyclerAdapter = RecyclerAdapter(this, newsList)
        recyclerView!!.layoutManager = LinearLayoutManager(this)
        recyclerView!!.setAdapter(recyclerAdapter)

        api = RetroClient.getApiService()


        val newsCall: Call<NewsModel?>? = api?.getList("techcrunch","49c3c9be3cda4ebf986c1215fa83da55")


        newsCall?.enqueue(object : Callback<NewsModel?> {

            override fun onResponse(call: Call<NewsModel?>, response: Response<NewsModel?>) {
                //  if (response.code()                                                                    == 200 && response.body().getArticles() != null) {
                if (response.isSuccessful && response.code()==200) {
                    // Log.d("resopnse running",""+String().length)
                    newsList.clear()
                    response.body()?.articles?.let { newsList.addAll(it) }
                    recyclerAdapter!!.notifyDataSetChanged()
                    Toast.makeText(this@ApIScreen ,"success", Toast.LENGTH_SHORT).show()
                    progressBar!!.visibility = View.GONE
                }
            }

            override fun onFailure(call: Call<NewsModel?>, t: Throwable) {
                progressBar!!.visibility = View.GONE
                Toast.makeText(this@ApIScreen, "unsucces" + t.message, Toast.LENGTH_SHORT).show()
            }
        })


    }

}





********************************************************************************************

package com.pinit.kotlinproject.Adpter
import android.content.Context
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import com.pinit.kotlinproject.ActivityClass.ApIScreen
import com.pinit.kotlinproject.ActivityClass.Article
import com.pinit.kotlinproject.R
import kotlin.collections.ArrayList

class RecyclerAdapter(var context: ApIScreen, private val mList: ArrayList<Article>) : RecyclerView.Adapter<RecyclerAdapter.ViewHolder>() {
    // create new views
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        // inflates the card_view_design view
        // that is used to hold list item
        val view = LayoutInflater.from(parent.context).inflate(R.layout.activity_ap_iscreen, parent, false)
        return ViewHolder(view, context)
    }

    // binds the list items to a view
    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val Article=mList.get(position)
        // sets the image to the imageview from our itemHolder class
        //  holder.imageView.setImageResource(ItemsViewModel.image)
        // sets the text to the textview from our itemHolder class
        holder.textView.text = Article.title
        //holder.imageView.setOnClickListener{
// //            val toast: Toast = Toast.makeText(context,"first", Toast.LENGTH_LONG)
//            toast.show()
    }
    override fun getItemCount(): Int {
        return mList.size
    }
    class ViewHolder(ItemView: View, context: Context) : RecyclerView.ViewHolder(ItemView) {

        // val imageView: ImageView = itemView.findViewById(R.id.imageview)
        val textView: TextView = itemView.findViewById(R.id.txt_view_api)
    }

}


**************************************************************************************************

package com.pinit.kotlinproject.ActivityClass
import com.google.gson.annotations.Expose
import com.google.gson.annotations.SerializedName

 data class Article (

    @SerializedName("author")
    @Expose
    var author: String? = null,

    @SerializedName("title")
    @Expose
    var title: String? = null,

    @SerializedName("description")
    @Expose
    var description: String? = null,

    @SerializedName("url")
    @Expose
    var url: String? = null,

    @SerializedName("urlToImage")
    @Expose
    var urlToImage: String? = null,

    @SerializedName("publishedAt")
    @Expose
    var publishedAt: String? = null,

    @SerializedName("content")
    @Expose
    var content: String? = null
 )


**********************************************************************************

package com.pinit.kotlinproject.ApiModel
import com.google.gson.annotations.Expose
import com.google.gson.annotations.SerializedName
import com.pinit.kotlinproject.ActivityClass.Article


 data  class NewsModel (
    @SerializedName("status")
    @Expose
    var status: String? = null,

    @SerializedName("totalResults")
    @Expose
    var totalResults: Int? = null,

    @SerializedName("articles")
    @Expose
    var articles: List<Article>? = null)

**************************************************************************
package com.pinit.kotlinproject.Retrofit
import com.pinit.kotlinproject.ApiModel.NewsModel
import okhttp3.MultipartBody
import retrofit2.Call
import retrofit2.http.*
import okhttp3.RequestBody
import retrofit2.http.POST
import retrofit2.http.Multipart
//https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=49c3c9be3cda4ebf986c1215fa83da55

interface Myapi {

    @GET("top-headlines")
    fun getList(@Query("sources") limit: String?,@Query("apiKey") limit2: String?): Call<NewsModel?>?

    @Multipart
    @POST("upload_image.php")
    suspend fun uploadFile(@Part body: MultipartBody.Part)

    @Multipart
    @POST("upload")
    fun uploadImage(@Part part: MultipartBody.Part?, @Part("somedata") requestBody: RequestBody?): Call<RequestBody?>?

}
*******************************************************************************************
package com.pinit.kotlinproject.Retrofit
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

 object RetroClient {

     private const val ROOT_URL = "https://newsapi.org/v2/"
     /**
      * Get Retrofit Instance
      */
     private fun getRetrofitInstance(): Retrofit {
         return Retrofit.Builder()
             .baseUrl(ROOT_URL)
             .addConverterFactory(GsonConverterFactory.create())
             .build() }

     fun getApiService(): Myapi? {
         return getRetrofitInstance().create(Myapi::class.java)
     }
 }
***********************************************************************************************8
